"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecureSessionManager = void 0;
class SecureSessionManager {
    constructor(options, serializeUser) {
        var _a;
        this.clearSessionIgnoreFields = ['session'];
        if (typeof options === 'function') {
            this.serializeUser = options;
            this.key = 'passport';
            this.clearSessionOnLogin = true;
        }
        else if (typeof serializeUser === 'function') {
            this.serializeUser = serializeUser;
            this.key =
                (options && typeof options === 'object' && typeof options.key === 'string' && options.key) || 'passport';
            this.clearSessionOnLogin = (_a = options.clearSessionOnLogin) !== null && _a !== void 0 ? _a : true;
            this.clearSessionIgnoreFields = [...this.clearSessionIgnoreFields, ...(options.clearSessionIgnoreFields || [])];
        }
        else {
            throw new Error('SecureSessionManager#constructor must have a valid serializeUser-function passed as a parameter');
        }
    }
    async logIn(request, user, options) {
        var _a, _b;
        const object = await this.serializeUser(user, request);
        if (request.session.regenerate) {
            if (this.clearSessionOnLogin && object) {
                const keepSessionInfoKeys = [...this.clearSessionIgnoreFields];
                if (options === null || options === void 0 ? void 0 : options.keepSessionInfo) {
                    keepSessionInfoKeys.push(...Object.keys(request.session));
                }
                await request.session.regenerate(keepSessionInfoKeys);
            }
            else {
                await request.session.regenerate();
            }
        }
        else if (this.clearSessionOnLogin && object) {
            const currentData = (_b = (_a = request.session) === null || _a === void 0 ? void 0 : _a.data()) !== null && _b !== void 0 ? _b : {};
            for (const field of Object.keys(currentData)) {
                if ((options === null || options === void 0 ? void 0 : options.keepSessionInfo) || this.clearSessionIgnoreFields.includes(field)) {
                    continue;
                }
                request.session.set(field, undefined);
            }
        }
        request.session.set(this.key, object);
    }
    async logOut(request) {
        request.session.set(this.key, undefined);
        if (request.session.regenerate) {
            await request.session.regenerate();
        }
    }
    getUserFromSession(request) {
        return request.session.get(this.key);
    }
}
exports.SecureSessionManager = SecureSessionManager;
//# sourceMappingURL=SecureSessionManager.js.map